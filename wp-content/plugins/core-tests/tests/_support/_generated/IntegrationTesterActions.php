<?php  //[STAMP] 9a7ac5f47fe6c09cb4d79f4634990888
namespace _generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

use Codeception\Module\WPLoader;
use Codeception\Module\WPCLI;

trait IntegrationTesterActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Calls a list of user-defined actions needed in tests.
     * @see \Codeception\Module\WPLoader::bootstrapActions()
     */
    public function bootstrapActions() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('bootstrapActions', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\WPLoader::activatePlugins()
     */
    public function activatePlugins() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('activatePlugins', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Loads the plugins required by the test.
     * @see \Codeception\Module\WPLoader::loadPlugins()
     */
    public function loadPlugins() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('loadPlugins', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Accessor method to get the object storing the factories for things.
	 *
	 * Example usage:
	 *
	 *        $postId = $I->factory()->post->create();
	 *
	 * @return \tad\WPBrowser\Module\WPLoader\FactoryStore
     * @see \Codeception\Module\WPLoader::factory()
     */
    public function factory() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('factory', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Executes a wp-cli command.
     *
     * The method is a wrapper around isolated calls to the wp-cli tool.
     * The library will use its own wp-cli version to run the commands.
     *
     * @param string $userCommand The string of command and parameters as it would be passed to wp-cli
     *                            e.g. a terminal call like `wp core version` becomes `core version`
     *                            omitting the call to wp-cli script.
     * @param array  $output If provided the array will be filled with the command output lines.
     *
     * @return int wp-cli exit value for the command
     *
     * @see \Codeception\Module\WPCLI::cli()
     */
    public function cli($userCommand = null, $output = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('cli', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns the output of a wp-cli command as an array.
     *
     * This method should be used in conjunction with wp-cli commands that will return lists.
     * E.g.
     *
     *      $inactiveThemes = $I->cliToArray('theme list --status=inactive --field=name');
     *
     * The above command could return an array like
     *
     *      ['twentyfourteen', 'twentyfifteen']
     *
     * No check will be made on the command the user inserted for coherency with a split-able
     * output.
     *
     * @param string        $userCommand
     * @param callable|null $splitCallback A optional callback function in charge of splitting the results array.
     *
     * @return array An array containing the output of wp-cli split into single elements.
     *
     * @throws \Codeception\Exception\ModuleException If the $splitCallback function does not return an array.
     * @see \Codeception\Module\WPCLI::cliToArray()
     */
    public function cliToArray($userCommand = null, $splitCallback = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('cliToArray', func_get_args()));
    }
}
